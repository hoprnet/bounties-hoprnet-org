import type { AnyBounty, Bounty, BountyCompleted } from "./types";
import {
  GoogleSpreadsheet,
  type GoogleSpreadsheetRow,
} from "google-spreadsheet";

const TRACKER_SHEET_ID = "1PrfPAxLEsQdKUCwHCLZ7gMBiv10CY1v3gRVx5Gh1QHY";

export const initialize = async (): Promise<GoogleSpreadsheet> => {
  // Initialize the sheet - doc ID is the long id in the sheets URL
  const doc = new GoogleSpreadsheet(TRACKER_SHEET_ID);

  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL as string,
    private_key: process.env.GOOGLE_PRIVATE_KEY as string,
  });

  return doc;
};

const COLUMNS = <const>{
  status: "status",
  submittedOn: "submitted on",
  completedOn: "completed on",
  bountyGithubUrl: "github issue link",
  bountyServiceUrl: "service url",
  submissionUrl: "submission url",
  demoUrl: "demo url",
  title: "title",
  description: "description",
  prize: "prize (USD)",
  contest: "contest",
  category: 'category'
};

const FilterByType =
  (type: "homepage" | "showcase") => (bounty: Partial<AnyBounty>) => {
    if (type === "homepage") {
      if (bounty.status !== "AVAILABLE" && bounty.status !== "TAKEN")
        return false;
    } else {
      if (bounty.status !== "COMPLETED") return false;
    }

    const keys = Object.keys(bounty);
    return keys.every((k) => typeof (bounty as any)[k] !== "undefined");
  };

const getBountyRows = async (): Promise<GoogleSpreadsheetRow[]> => {
  const sheet = await initialize();
  await sheet.loadInfo();
  const bountiesSheet = sheet.sheetsByTitle.bounties;
  return bountiesSheet.getRows();
};

const toHomePageBounty = (row: GoogleSpreadsheetRow): Partial<Bounty> => {
  const status: Bounty["status"] | undefined = (() => {
    const s = row[COLUMNS.status];
    return s === "paid"
      ? "COMPLETED"
      : s === "submitted"
      ? "AVAILABLE"
      : s === "in progress"
      ? "TAKEN"
      : undefined;
  })();
  const contest = row[COLUMNS.contest] === "TRUE" ? true : false;
  const submittedOn: string | undefined = (() => {
    try {
      return new Date(row[COLUMNS.submittedOn]).toISOString();
    } catch {
      return undefined;
    }
  })();
  const category = row[COLUMNS.category] ? row[COLUMNS.category] : null;

  return {
    status,
    prize: row[COLUMNS.prize],
    bountyGithubUrl: row[COLUMNS.bountyGithubUrl],
    bountyServiceUrl: row[COLUMNS.bountyServiceUrl],
    title: row[COLUMNS.title],
    description: row[COLUMNS.description],
    contest,
    submittedOn,
    category
  };
};

const toShowcaseBounty = (
  row: GoogleSpreadsheetRow
): Partial<BountyCompleted> => {
  const completedOn: string | undefined = (() => {
    try {
      return new Date(row[COLUMNS.completedOn]).toISOString();
    } catch {
      return undefined;
    }
  })();

  return {
    ...toHomePageBounty(row),
    demoUrl: row[COLUMNS.demoUrl],
    submissionUrl: row[COLUMNS.submissionUrl],
    completedOn,
  };
};

export const getHomePageBounties = async (): Promise<Bounty[]> => {
  const rows = await getBountyRows();
  const bounties = rows
    .map(toHomePageBounty)
    .filter(FilterByType("homepage")) as Bounty[];

  return bounties;
};

export const getShowcaseBounties = async (): Promise<BountyCompleted[]> => {
  const rows = await getBountyRows();
  const bounties = rows
    .map(toShowcaseBounty)
    .filter(FilterByType("showcase")) as BountyCompleted[];

  return bounties;
};
